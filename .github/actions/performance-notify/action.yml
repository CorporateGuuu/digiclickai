name: 'Performance Regression Notification'
description: 'Send performance budget violation alerts with detailed metrics and recommendations'
inputs:
  webhook-url:
    description: 'Slack webhook URL'
    required: true
  email-config:
    description: 'Email configuration JSON'
    required: false
  performance-status:
    description: 'Performance audit status (success, warning, failure)'
    required: true
  lighthouse-score:
    description: 'Lighthouse performance score'
    required: false
    default: '0'
  violations:
    description: 'JSON array of performance violations'
    required: false
    default: '[]'
  warnings:
    description: 'JSON array of performance warnings'
    required: false
    default: '[]'
  lighthouse-report-url:
    description: 'URL to Lighthouse report'
    required: false
  pagespeed-url:
    description: 'PageSpeed Insights URL'
    required: false
  deployment-url:
    description: 'Deployment URL'
    required: true
  commit-hash:
    description: 'Git commit hash'
    required: false
  github-run-url:
    description: 'GitHub Actions run URL'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Determine alert severity and escalation level
      id: severity
      shell: bash
      run: |
        LIGHTHOUSE_SCORE="${{ inputs.lighthouse-score }}"
        VIOLATIONS='${{ inputs.violations }}'

        # Count violations by type
        CRITICAL_COUNT=$(echo "$VIOLATIONS" | jq '[.[] | select(.severity == "critical")] | length' 2>/dev/null || echo "0")
        WARNING_COUNT=$(echo "$VIOLATIONS" | jq '[.[] | select(.severity == "warning")] | length' 2>/dev/null || echo "0")

        # Determine alert level based on comprehensive criteria
        if [ "$LIGHTHOUSE_SCORE" -lt 85 ] || [ "$CRITICAL_COUNT" -ge 3 ]; then
          ALERT_LEVEL="emergency"
          echo "color=danger" >> $GITHUB_OUTPUT
          echo "emoji=üö®" >> $GITHUB_OUTPUT
          echo "priority=urgent" >> $GITHUB_OUTPUT
          echo "title=URGENT: System-wide Performance Failure" >> $GITHUB_OUTPUT
          echo "escalation=true" >> $GITHUB_OUTPUT
        elif [ "$LIGHTHOUSE_SCORE" -lt 85 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
          ALERT_LEVEL="critical"
          echo "color=danger" >> $GITHUB_OUTPUT
          echo "emoji=‚ùå" >> $GITHUB_OUTPUT
          echo "priority=high" >> $GITHUB_OUTPUT
          echo "title=Critical Performance Alert" >> $GITHUB_OUTPUT
          echo "escalation=false" >> $GITHUB_OUTPUT
        elif [ "$LIGHTHOUSE_SCORE" -lt 90 ] || [ "$WARNING_COUNT" -gt 0 ]; then
          ALERT_LEVEL="warning"
          echo "color=warning" >> $GITHUB_OUTPUT
          echo "emoji=‚ö†Ô∏è" >> $GITHUB_OUTPUT
          echo "priority=medium" >> $GITHUB_OUTPUT
          echo "title=Performance Degradation Warning" >> $GITHUB_OUTPUT
          echo "escalation=false" >> $GITHUB_OUTPUT
        else
          ALERT_LEVEL="success"
          echo "color=good" >> $GITHUB_OUTPUT
          echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
          echo "priority=low" >> $GITHUB_OUTPUT
          echo "title=Performance Budget Compliance" >> $GITHUB_OUTPUT
          echo "escalation=false" >> $GITHUB_OUTPUT
        fi

        echo "alert_level=$ALERT_LEVEL" >> $GITHUB_OUTPUT
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT

    - name: Parse performance data
      id: parse
      shell: bash
      run: |
        # Parse violations and warnings
        VIOLATIONS='${{ inputs.violations }}'
        WARNINGS='${{ inputs.warnings }}'
        
        # Count issues
        VIOLATION_COUNT=$(echo "$VIOLATIONS" | jq '. | length' 2>/dev/null || echo "0")
        WARNING_COUNT=$(echo "$WARNINGS" | jq '. | length' 2>/dev/null || echo "0")
        
        echo "violation_count=$VIOLATION_COUNT" >> $GITHUB_OUTPUT
        echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
        
        # Generate summary
        if [ "$VIOLATION_COUNT" -gt 0 ]; then
          SUMMARY="üö® $VIOLATION_COUNT performance budget violations detected"
        elif [ "$WARNING_COUNT" -gt 0 ]; then
          SUMMARY="‚ö†Ô∏è $WARNING_COUNT performance warnings detected"
        else
          SUMMARY="‚úÖ All performance budgets within acceptable limits"
        fi
        
        echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

    - name: Generate enhanced performance recommendations
      id: recommendations
      shell: bash
      run: |
        RECOMMENDATIONS=""
        IMMEDIATE_ACTIONS=""
        LIGHTHOUSE_SCORE="${{ inputs.lighthouse-score }}"
        VIOLATIONS='${{ inputs.violations }}'
        ALERT_LEVEL="${{ steps.severity.outputs.alert_level }}"

        # Generate recommendations based on alert level and specific violations
        case "$ALERT_LEVEL" in
          "emergency")
            IMMEDIATE_ACTIONS="üö® IMMEDIATE ACTIONS REQUIRED:\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Check system status dashboard immediately\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Verify cursor demo functionality: ${{ inputs.deployment-url }}/cursor-context-demo\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Consider emergency rollback to previous version\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Contact on-call engineer for immediate assistance\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Monitor user impact and error rates\n\n"
            ;;
          "critical")
            IMMEDIATE_ACTIONS="‚ùå URGENT ACTIONS NEEDED:\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Review and address critical performance issues within 1 hour\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Test cursor functionality across all variants\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Monitor Core Web Vitals impact on SEO\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Prepare rollback plan if issues persist\n\n"
            ;;
          "warning")
            IMMEDIATE_ACTIONS="‚ö†Ô∏è RECOMMENDED ACTIONS:\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Schedule performance optimization within 24 hours\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Review recent changes for performance impact\n"
            IMMEDIATE_ACTIONS="$IMMEDIATE_ACTIONS‚Ä¢ Monitor trends to prevent escalation\n\n"
            ;;
        esac

        # Lighthouse score specific recommendations
        if [ "$LIGHTHOUSE_SCORE" -lt 85 ]; then
          RECOMMENDATIONS="$RECOMMENDATIONSüéØ LIGHTHOUSE OPTIMIZATION (Score: $LIGHTHOUSE_SCORE):\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Optimize images using WebP/AVIF formats\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Implement critical CSS inlining\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Enable code splitting and lazy loading\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Reduce unused JavaScript and CSS\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Optimize third-party scripts\n\n"
        elif [ "$LIGHTHOUSE_SCORE" -lt 90 ]; then
          RECOMMENDATIONS="$RECOMMENDATIONSüîß LIGHTHOUSE FINE-TUNING (Score: $LIGHTHOUSE_SCORE):\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Fine-tune image optimization\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Review font loading strategies\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Consider service worker caching\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Optimize animation performance\n\n"
        fi

        # Core Web Vitals recommendations
        if echo "$VIOLATIONS" | grep -q "FCP\|LCP"; then
          RECOMMENDATIONS="$RECOMMENDATIONS‚ö° LOADING PERFORMANCE:\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Optimize server response times\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Implement resource hints (preload, prefetch)\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Minimize render-blocking resources\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Optimize critical rendering path\n\n"
        fi

        if echo "$VIOLATIONS" | grep -q "CLS"; then
          RECOMMENDATIONS="$RECOMMENDATIONSüìê LAYOUT STABILITY:\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Add size attributes to images and videos\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Reserve space for dynamic content\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Use CSS aspect-ratio for responsive elements\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Avoid inserting content above existing content\n\n"
        fi

        # Cursor system specific recommendations
        if echo "$VIOLATIONS" | grep -q "CURSOR\|cursor"; then
          RECOMMENDATIONS="$RECOMMENDATIONSüñ±Ô∏è CURSOR SYSTEM OPTIMIZATION:\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Optimize GSAP animations for hardware acceleration\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Reduce particle count in enhanced/gaming variants\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Implement animation frame throttling\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Use transform3d for GPU acceleration\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Clean up event listeners on component unmount\n\n"
        fi

        # Bundle size recommendations
        if echo "$VIOLATIONS" | grep -q "BUNDLE\|bundle"; then
          RECOMMENDATIONS="$RECOMMENDATIONSüì¶ BUNDLE OPTIMIZATION:\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Enable code splitting with dynamic imports\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Remove unused dependencies\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Optimize third-party library usage\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Implement tree shaking\n"
          RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Use CSS modules for component-specific styles\n\n"
        fi

        # A/B testing variant specific recommendations
        RECOMMENDATIONS="$RECOMMENDATIONSüß™ A/B TESTING CONSIDERATIONS:\n"
        RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Test performance across all cursor variants (Control, Enhanced, Minimal, Gaming)\n"
        RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Monitor variant-specific performance metrics\n"
        RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Consider disabling problematic variants temporarily\n\n"

        # Monitoring and prevention
        RECOMMENDATIONS="$RECOMMENDATIONSüìä MONITORING & PREVENTION:\n"
        RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Set up performance alerts for early detection\n"
        RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Implement performance budgets in CI/CD\n"
        RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Regular performance audits and optimization\n"
        RECOMMENDATIONS="$RECOMMENDATIONS‚Ä¢ Monitor real user metrics (RUM)\n"

        echo "immediate_actions<<EOF" >> $GITHUB_OUTPUT
        echo -e "$IMMEDIATE_ACTIONS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "recommendations<<EOF" >> $GITHUB_OUTPUT
        echo -e "$RECOMMENDATIONS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Send enhanced Slack performance alert
      shell: bash
      run: |
        # Create performance-specific Slack payload with escalation levels
        LIGHTHOUSE_SCORE="${{ inputs.lighthouse-score }}"
        ALERT_LEVEL="${{ steps.severity.outputs.alert_level }}"
        ESCALATION="${{ steps.severity.outputs.escalation }}"

        # Determine urgency and formatting
        case "$ALERT_LEVEL" in
          "emergency")
            URGENCY="<!channel> URGENT ATTENTION REQUIRED"
            SCORE_COLOR="danger"
            ;;
          "critical")
            URGENCY="<!here> Critical Performance Issue"
            SCORE_COLOR="danger"
            ;;
          "warning")
            URGENCY="Performance Degradation Detected"
            SCORE_COLOR="warning"
            ;;
          *)
            URGENCY="Performance Status Update"
            SCORE_COLOR="good"
            ;;
        esac

        # Build comprehensive fields array
        FIELDS='[
          {
            "title": "üéØ Lighthouse Score",
            "value": "'$LIGHTHOUSE_SCORE'/100",
            "short": true
          },
          {
            "title": "üö® Alert Level",
            "value": "'$ALERT_LEVEL'",
            "short": true
          },
          {
            "title": "‚ùå Critical Issues",
            "value": "${{ steps.severity.outputs.critical_count }}",
            "short": true
          },
          {
            "title": "‚ö†Ô∏è Warnings",
            "value": "${{ steps.severity.outputs.warning_count }}",
            "short": true
          },
          {
            "title": "‚è±Ô∏è Response Time",
            "value": "< 2 minutes required",
            "short": true
          },
          {
            "title": "üìä Priority",
            "value": "${{ steps.severity.outputs.priority }}",
            "short": true
          }
        ]'

        # Add deployment and monitoring links
        FIELDS=$(echo $FIELDS | jq '. + [
          {
            "title": "üåê Live Site",
            "value": "<${{ inputs.deployment-url }}|View Site>",
            "short": true
          },
          {
            "title": "üñ±Ô∏è Cursor Demo",
            "value": "<${{ inputs.deployment-url }}/cursor-context-demo|Test Cursor>",
            "short": true
          }
        ]')

        # Add A/B testing dashboard link
        FIELDS=$(echo $FIELDS | jq '. + [
          {
            "title": "üß™ A/B Test Dashboard",
            "value": "<${{ inputs.deployment-url }}/admin/ab-test|View Variants>",
            "short": true
          }
        ]')

        # Add external monitoring links if available
        if [ -n "${{ inputs.lighthouse-report-url }}" ]; then
          FIELDS=$(echo $FIELDS | jq '. + [{"title": "üìä Lighthouse Report", "value": "<${{ inputs.lighthouse-report-url }}|View Report>", "short": true}]')
        fi

        if [ -n "${{ inputs.pagespeed-url }}" ]; then
          FIELDS=$(echo $FIELDS | jq '. + [{"title": "üîç PageSpeed Insights", "value": "<${{ inputs.pagespeed-url }}|View Analysis>", "short": true}]')
        fi

        # Add GitHub Actions link
        FIELDS=$(echo $FIELDS | jq '. + [{"title": "üîß Build Logs", "value": "<${{ inputs.github-run-url }}|View Logs>", "short": true}]')

        # Create main alert payload
        MAIN_PAYLOAD=$(cat <<EOF
        {
          "username": "DigiClick AI Performance Monitor",
          "icon_emoji": ":rotating_light:",
          "text": "$URGENCY",
          "attachments": [
            {
              "color": "${{ steps.severity.outputs.color }}",
              "title": "${{ steps.severity.outputs.emoji }} ${{ steps.severity.outputs.title }}",
              "text": "${{ steps.parse.outputs.summary }}",
              "fields": $FIELDS,
              "footer": "DigiClick AI Performance Monitoring ‚Ä¢ Commit: ${{ inputs.commit-hash }}",
              "footer_icon": "https://developers.google.com/web/tools/lighthouse/images/lighthouse-icon-128.png",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        # Send main alert to Slack
        curl -X POST -H 'Content-type: application/json' \
          --data "$MAIN_PAYLOAD" \
          "${{ inputs.webhook-url }}"

    - name: Send detailed alert with immediate actions
      if: steps.severity.outputs.alert_level != 'success'
      shell: bash
      run: |
        # Send detailed alert with immediate actions and recommendations
        ALERT_LEVEL="${{ steps.severity.outputs.alert_level }}"
        VIOLATIONS='${{ inputs.violations }}'

        # Format violations for display
        VIOLATION_SUMMARY=""
        if [ "${{ steps.severity.outputs.critical_count }}" -gt 0 ] || [ "${{ steps.severity.outputs.warning_count }}" -gt 0 ]; then
          VIOLATION_SUMMARY=$(echo "$VIOLATIONS" | jq -r '.[] | "‚Ä¢ " + (.type // "unknown") + ": " + (.message // "No details")' | head -8)
        fi

        # Create detailed alert payload
        DETAILED_PAYLOAD=$(cat <<EOF
        {
          "username": "DigiClick AI Performance Monitor",
          "icon_emoji": ":warning:",
          "attachments": [
            {
              "color": "${{ steps.severity.outputs.color }}",
              "title": "${{ steps.severity.outputs.emoji }} Detailed Performance Analysis",
              "text": "Comprehensive breakdown of performance issues and recommended actions.",
              "fields": [
                {
                  "title": "üö® Immediate Actions Required",
                  "value": "${{ steps.recommendations.outputs.immediate_actions }}",
                  "short": false
                },
                {
                  "title": "üìã Specific Issues Detected",
                  "value": "$VIOLATION_SUMMARY",
                  "short": false
                },
                {
                  "title": "üîß Optimization Recommendations",
                  "value": "${{ steps.recommendations.outputs.recommendations }}",
                  "short": false
                }
              ],
              "footer": "Alert Level: $ALERT_LEVEL ‚Ä¢ Commit: ${{ inputs.commit-hash }}",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        curl -X POST -H 'Content-type: application/json' \
          --data "$DETAILED_PAYLOAD" \
          "${{ inputs.webhook-url }}"

    - name: Send emergency escalation alert
      if: steps.severity.outputs.alert_level == 'emergency'
      shell: bash
      run: |
        # Send emergency escalation with rollback instructions
        EMERGENCY_PAYLOAD=$(cat <<EOF
        {
          "username": "DigiClick AI Emergency Alert",
          "icon_emoji": ":rotating_light:",
          "text": "<!channel> üö® EMERGENCY: DigiClick AI System-wide Performance Failure",
          "attachments": [
            {
              "color": "danger",
              "title": "üö® EMERGENCY RESPONSE REQUIRED",
              "text": "Multiple critical performance failures detected. Immediate intervention required.",
              "fields": [
                {
                  "title": "üî• Emergency Actions",
                  "value": "‚Ä¢ Contact on-call engineer immediately\n‚Ä¢ Verify system status: <${{ inputs.deployment-url }}|Live Site>\n‚Ä¢ Test cursor functionality: <${{ inputs.deployment-url }}/cursor-context-demo|Cursor Demo>\n‚Ä¢ Prepare for emergency rollback\n‚Ä¢ Monitor user impact and error rates",
                  "short": false
                },
                {
                  "title": "üìä System Status",
                  "value": "‚Ä¢ Lighthouse Score: ${{ inputs.lighthouse-score }}/100\n‚Ä¢ Critical Issues: ${{ steps.severity.outputs.critical_count }}\n‚Ä¢ Alert Level: EMERGENCY\n‚Ä¢ Response Time: < 5 minutes",
                  "short": true
                },
                {
                  "title": "üîß Quick Links",
                  "value": "‚Ä¢ <${{ inputs.github-run-url }}|Build Logs>\n‚Ä¢ <${{ inputs.deployment-url }}/admin/ab-test|A/B Dashboard>\n‚Ä¢ <https://app.netlify.com|Netlify Dashboard>",
                  "short": true
                },
                {
                  "title": "üìû Emergency Contacts",
                  "value": "‚Ä¢ Lead Developer: lead-dev@digiclickai.com\n‚Ä¢ DevOps Engineer: devops@digiclickai.com\n‚Ä¢ On-call Engineer: Check PagerDuty",
                  "short": false
                }
              ],
              "footer": "Emergency Alert ‚Ä¢ Immediate Response Required ‚Ä¢ Commit: ${{ inputs.commit-hash }}",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        curl -X POST -H 'Content-type: application/json' \
          --data "$EMERGENCY_PAYLOAD" \
          "${{ inputs.webhook-url }}"

    - name: Send cursor system specific alert
      if: contains(inputs.violations, 'CURSOR')
      shell: bash
      run: |
        CURSOR_PAYLOAD=$(cat <<EOF
        {
          "username": "DigiClick AI Performance Monitor",
          "icon_emoji": ":computer_mouse:",
          "attachments": [
            {
              "color": "warning",
              "title": "üñ±Ô∏è Cursor System Performance Alert",
              "text": "Context-aware cursor system performance has degraded beyond acceptable thresholds.",
              "fields": [
                {
                  "title": "Cursor Demo Page",
                  "value": "<${{ inputs.deployment-url }}/cursor-context-demo|Test Cursor Interactions>",
                  "short": true
                },
                {
                  "title": "Expected Performance",
                  "value": "60fps animations, <16ms response time",
                  "short": true
                },
                {
                  "title": "Optimization Guide",
                  "value": "‚Ä¢ Check GSAP animation efficiency\n‚Ä¢ Verify memory leak prevention\n‚Ä¢ Test across different devices",
                  "short": false
                }
              ],
              "footer": "Cursor system is critical for DigiClick AI user experience",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )
        
        curl -X POST -H 'Content-type: application/json' \
          --data "$CURSOR_PAYLOAD" \
          "${{ inputs.webhook-url }}"
