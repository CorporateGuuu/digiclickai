name: DigiClick AI - Deploy with Cursor Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.18.0'
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
  NODE_ENV: ${{ secrets.NODE_ENV }}

jobs:
  # Health Check Job
  health-check:
    name: 🔍 Health Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎯 Run cursor health check
        run: npm run check:cursor

      - name: 📊 Upload health report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: health-check-report
          path: reports/

  # Lint and Format Job
  lint:
    name: 🧹 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧹 Run ESLint
        run: npm run lint

      - name: 🎨 Check Prettier formatting
        run: npm run format:check

  # Test Job
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: [health-check]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm test

      - name: 🎯 Run cursor-specific tests
        run: npm run test:cursor

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/

  # Build Job
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}

      - name: 📊 Analyze bundle size
        run: npm run build:analyze
        if: github.event_name == 'pull_request'

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  # Performance Testing Job
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🚀 Start application
        run: npm start &
        env:
          NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_APP_URL: http://localhost:3000

      - name: ⏳ Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: 🎯 Run Lighthouse CI
        run: npm run performance:test

      - name: 📊 Upload performance report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-report
          path: reports/lighthouse.json

  # Deploy to Vercel (Production)
  deploy-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  # Deploy to Netlify (Production)
  deploy-netlify:
    name: 🚀 Deploy to Netlify (Production)
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}

      - name: 🔍 Verify build output
        run: |
          echo "Checking build output..."
          ls -la out/
          echo "Verifying sitemap generation..."
          ls -la public/sitemap.xml
          echo "Checking cursor system files..."
          find out/ -name "*cursor*" -type f | head -5

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy DigiClick AI with Context-Aware Cursor System - ${{ github.event.head_commit.message }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Post-Deployment Testing
  post-deploy-test:
    name: 🧪 Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: [deploy-netlify]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: ⏳ Wait for deployment to be live
        run: |
          echo "Waiting for site to be available..."
          npx wait-on ${{ secrets.NEXT_PUBLIC_APP_URL }} --timeout 300000
          sleep 30

      - name: 🎯 Test cursor functionality on live site
        run: |
          echo "Testing cursor context demo page..."
          curl -f ${{ secrets.NEXT_PUBLIC_APP_URL }}/cursor-context-demo || exit 1
          echo "Testing main portfolio page..."
          curl -f ${{ secrets.NEXT_PUBLIC_APP_URL }}/portfolio || exit 1
          echo "Testing sitemap..."
          curl -f ${{ secrets.NEXT_PUBLIC_APP_URL }}/sitemap.xml || exit 1

      - name: 🔍 Verify cursor system deployment
        run: |
          echo "Checking for cursor-related assets..."
          curl -s ${{ secrets.NEXT_PUBLIC_APP_URL }} | grep -i "cursor" && echo "✅ Cursor system detected" || echo "❌ Cursor system not found"

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: post-deploy-test-results
          path: |
            test-results/
            playwright-report/

  # Notification Job
  notify:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-netlify, post-deploy-test]
    if: always()
    steps:
      - name: 📢 Notify success
        if: needs.deploy-netlify.result == 'success' && needs.post-deploy-test.result == 'success'
        run: |
          echo "🎉 DigiClick AI deployed successfully to Netlify!"
          echo "🌐 Live site: ${{ secrets.NEXT_PUBLIC_APP_URL }}"
          echo "🎯 Context-aware cursor demo: ${{ secrets.NEXT_PUBLIC_APP_URL }}/cursor-context-demo"
          echo "📄 Sitemap: ${{ secrets.NEXT_PUBLIC_APP_URL }}/sitemap.xml"
          echo "✅ All 43 pages deployed with enhanced cursor system"

      - name: 📢 Notify failure
        if: needs.deploy-netlify.result == 'failure' || needs.post-deploy-test.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs and fix any issues."
          echo "Common issues: Script path errors, missing secrets, build failures"
