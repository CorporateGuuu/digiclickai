name: DigiClick AI - Deploy with Cursor Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.18.0'
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
  NODE_ENV: ${{ secrets.NODE_ENV }}

jobs:
  # Health Check Job
  health-check:
    name: 🔍 Health Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎯 Run cursor health check
        run: npm run check:cursor

      - name: 📊 Upload health report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: health-check-report
          path: reports/

  # Lint and Format Job
  lint:
    name: 🧹 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧹 Run ESLint
        run: npm run lint

      - name: 🎨 Check Prettier formatting
        run: npm run format:check

  # Test Job
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: [health-check]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm test

      - name: 🎯 Run cursor-specific tests
        run: npm run test:cursor

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/

  # Build Job
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}

      - name: 📊 Analyze bundle size
        run: npm run build:analyze
        if: github.event_name == 'pull_request'

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  # Performance Testing Job
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🚀 Start application
        run: npm start &
        env:
          NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_APP_URL: http://localhost:3000

      - name: ⏳ Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: 🎯 Run Lighthouse CI
        run: npm run performance:test

      - name: 📊 Upload performance report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-report
          path: reports/lighthouse.json

  # Deploy to Vercel (Production)
  deploy-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  # Deploy to Netlify (Production)
  deploy-netlify:
    name: 🚀 Deploy to Netlify (Production)
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}

      - name: 🔍 Verify build output
        run: |
          echo "Checking build output..."
          ls -la out/
          echo "Verifying sitemap generation..."
          ls -la public/sitemap.xml
          echo "Checking cursor system files..."
          find out/ -name "*cursor*" -type f | head -5

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy DigiClick AI with Context-Aware Cursor System - ${{ github.event.head_commit.message }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Post-Deployment Testing
  post-deploy-test:
    name: 🧪 Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: [deploy-netlify]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: ⏳ Wait for deployment to be live
        run: |
          echo "Waiting for site to be available..."
          npx wait-on ${{ secrets.NEXT_PUBLIC_APP_URL }} --timeout 300000
          sleep 30

      - name: 🎯 Test cursor functionality on live site
        run: |
          echo "Testing cursor context demo page..."
          curl -f ${{ secrets.NEXT_PUBLIC_APP_URL }}/cursor-context-demo || exit 1
          echo "Testing main portfolio page..."
          curl -f ${{ secrets.NEXT_PUBLIC_APP_URL }}/portfolio || exit 1
          echo "Testing sitemap..."
          curl -f ${{ secrets.NEXT_PUBLIC_APP_URL }}/sitemap.xml || exit 1

      - name: 🔍 Verify cursor system deployment
        run: |
          echo "Checking for cursor-related assets..."
          curl -s ${{ secrets.NEXT_PUBLIC_APP_URL }} | grep -i "cursor" && echo "✅ Cursor system detected" || echo "❌ Cursor system not found"

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: post-deploy-test-results
          path: |
            test-results/
            playwright-report/

  # Comprehensive Notification Job
  notify:
    name: 📢 Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-netlify, post-deploy-test]
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Calculate build metrics
        id: metrics
        run: |
          # Calculate build time (approximate)
          BUILD_START_TIME="${{ github.event.head_commit.timestamp }}"
          BUILD_END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Get commit info
          COMMIT_HASH="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_HASH:0:7}"
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          BRANCH_NAME="${{ github.ref_name }}"

          # Determine overall status
          if [[ "${{ needs.deploy-netlify.result }}" == "success" && "${{ needs.post-deploy-test.result }}" == "success" ]]; then
            OVERALL_STATUS="success"
            STATUS_EMOJI="✅"
            STATUS_TEXT="SUCCESS"
          elif [[ "${{ needs.deploy-netlify.result }}" == "failure" || "${{ needs.post-deploy-test.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            STATUS_EMOJI="❌"
            STATUS_TEXT="FAILURE"
          else
            OVERALL_STATUS="warning"
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="WARNING"
          fi

          # Set outputs
          echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
          echo "status_text=$STATUS_TEXT" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "commit_short=$COMMIT_SHORT" >> $GITHUB_OUTPUT
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "build_time=~5 minutes" >> $GITHUB_OUTPUT
          echo "github_run_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: 📧 Send email notification
        if: always()
        uses: ./.github/actions/email-notify
        with:
          smtp-server: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
          smtp-port: ${{ secrets.SMTP_PORT || '587' }}
          smtp-username: ${{ secrets.SMTP_USERNAME }}
          smtp-password: ${{ secrets.SMTP_PASSWORD }}
          from-email: ${{ secrets.FROM_EMAIL }}
          to-emails: ${{ secrets.ALERT_EMAIL_RECIPIENTS }}
          status: ${{ steps.metrics.outputs.status }}
          subject: "${{ steps.metrics.outputs.status_emoji }} DigiClick AI Deployment ${{ steps.metrics.outputs.status_text }} - ${{ steps.metrics.outputs.commit_short }}"
          commit-hash: ${{ steps.metrics.outputs.commit_hash }}
          commit-message: ${{ steps.metrics.outputs.commit_message }}
          branch: ${{ steps.metrics.outputs.branch_name }}
          deployment-url: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          build-time: ${{ steps.metrics.outputs.build_time }}
          github-run-url: ${{ steps.metrics.outputs.github_run_url }}
          error-details: ${{ needs.deploy-netlify.result == 'failure' && 'Netlify deployment failed' || needs.post-deploy-test.result == 'failure' && 'Post-deployment tests failed' || '' }}

      - name: 💬 Send Slack notification
        if: always()
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: ${{ steps.metrics.outputs.status }}
          title: "DigiClick AI Deployment ${{ steps.metrics.outputs.status_text }}"
          message: ${{ steps.metrics.outputs.status == 'success' && 'Deployment completed successfully with enhanced cursor system!' || 'Deployment encountered issues. Check logs for details.' }}
          commit-hash: ${{ steps.metrics.outputs.commit_hash }}
          commit-message: ${{ steps.metrics.outputs.commit_message }}
          branch: ${{ steps.metrics.outputs.branch_name }}
          deployment-url: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          build-time: ${{ steps.metrics.outputs.build_time }}
          github-run-url: ${{ steps.metrics.outputs.github_run_url }}
          error-details: ${{ needs.deploy-netlify.result == 'failure' && 'Netlify deployment failed - check build logs' || needs.post-deploy-test.result == 'failure' && 'Post-deployment verification failed - site may be inaccessible' || '' }}

      - name: 🔍 Run comprehensive monitoring
        if: steps.metrics.outputs.status == 'success'
        run: |
          echo "🔍 Running post-deployment monitoring..."
          node scripts/deployment-monitor.js
        env:
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: 📊 Upload monitoring report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: deployment-monitoring-report
          path: |
            reports/
          retention-days: 30

      - name: 🚨 Send failure alert with details
        if: steps.metrics.outputs.status == 'failure'
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: failure
          title: "🚨 URGENT: DigiClick AI Deployment Failed"
          message: |
            Immediate action required! Deployment has failed and may impact live site.

            **Next Steps:**
            1. Check GitHub Actions logs
            2. Verify Netlify deployment status
            3. Test cursor system functionality
            4. Consider rollback if necessary
          commit-hash: ${{ steps.metrics.outputs.commit_hash }}
          commit-message: ${{ steps.metrics.outputs.commit_message }}
          branch: ${{ steps.metrics.outputs.branch_name }}
          github-run-url: ${{ steps.metrics.outputs.github_run_url }}
          error-details: "Build: ${{ needs.build.result }} | Deploy: ${{ needs.deploy-netlify.result }} | Tests: ${{ needs.post-deploy-test.result }}"
