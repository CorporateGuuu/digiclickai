name: Deploy Backend to Render

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'package.json'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test

      - name: Run linting
        run: npm run lint

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Deploying to Render..."
          response=$(curl -s -X POST \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}')
          
          echo "Deploy response: $response"
          
          # Extract deploy ID for monitoring
          deploy_id=$(echo $response | jq -r '.id')
          echo "Deploy ID: $deploy_id"
          
          # Wait for deployment to complete (optional)
          if [ "$deploy_id" != "null" ]; then
            echo "Monitoring deployment progress..."
            for i in {1..30}; do
              sleep 10
              status=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
                "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$deploy_id" | \
                jq -r '.status')
              echo "Deploy status: $status"
              
              if [ "$status" = "live" ]; then
                echo "✅ Deployment successful!"
                break
              elif [ "$status" = "build_failed" ] || [ "$status" = "update_failed" ]; then
                echo "❌ Deployment failed!"
                exit 1
              fi
            done
          fi

      - name: Health Check
        run: |
          echo "Performing health check..."
          sleep 30  # Wait for service to be ready
          
          # Health check endpoint
          health_url="${{ secrets.BACKEND_URL }}/api/health"
          
          for i in {1..5}; do
            if curl -f -s "$health_url" > /dev/null; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Health check attempt $i failed, retrying..."
              sleep 10
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
          done

      - name: Notify Deployment Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Backend deployment to Render: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  update-frontend-env:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Trigger Frontend Deployment
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            -d '{"event_type": "backend-deployed"}'
